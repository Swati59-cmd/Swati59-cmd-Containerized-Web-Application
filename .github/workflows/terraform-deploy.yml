name: Terraform Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: "Select environment to deploy"
        required: true
        options:
          - dev
          - stage
          - prod
      destroy:
        type: boolean
        description: "Set to true to destroy resources"
        required: false
        default: false

env:
  AWS_REGION: us-east-1

jobs:
  terraform:
    name: Terraform ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest

    steps:
      - name: Print selected environment and destroy flag
        run: |
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Destroy: ${{ github.event.inputs.destroy }}"

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set Environment Directory
        id: set-dir
        run: |
          echo "ENV_DIR=Environment/${{ github.event.inputs.environment }}/ECS" >> $GITHUB_ENV
          if [ ! -d "Environment/${{ github.event.inputs.environment }}/ECS" ]; then
            echo "Directory Environment/${{ github.event.inputs.environment }}/ECS does not exist."
            exit 1
          fi

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.ENV_DIR }}

      - name: Terraform Plan
        if: ${{ github.event.inputs.destroy == false }}
        run: terraform plan -out=tfplan
        working-directory: ${{ env.ENV_DIR }}

      - name: Terraform Apply
        if: ${{ github.event.inputs.destroy == false }}
        run: terraform apply -auto-approve tfplan
        working-directory: ${{ env.ENV_DIR }}

      - name: Terraform Destroy
        if: ${{ github.event.inputs.destroy == true }}
        run: terraform destroy -auto-approve
        working-directory: ${{ env.ENV_DIR }}
